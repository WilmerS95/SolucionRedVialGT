@page "/buscar-ruta"

@using System.Collections.Generic
@using System.Linq
@using RedVialGT.Shared
@using RedVialGT.Client.Services
@using System.Text.Json
@using Microsoft.JSInterop
@using RedVialGT.Client

@inject IRutaService rutaService

<h3>Buscar Ruta entre Departamentos</h3>

@if (listaRutas == null)
{
    <tr>
        <td colspan="12" align="center">
            <p>Cargando...</p>
            <img style="width:50px; display:block; margin:auto;" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
        </td>
    </tr>
}
else
{
    <div class="input-group mb-3">
        <label class="input-group-text" for="selectRutaPartida">Seleccionar Departamento de Partida</label>
        <select class="form-select" id="selectRutaPartida" @bind="idRutaPartida">
            <option value="0">Selecciona un departamento...</option>
            @if (listaRutas != null)
            {
                foreach (var ruta in listaRutas)
                {
                    <option value="@ruta.IdRuta">@ruta.NombreRuta</option>
                }
            }
            else
            {
                <p>El objeto es null.</p>
            }
        </select>
        <button class="btn btn-secondary" @onclick="MostrarDatosDepartamentoPartida">Mostrar Datos</button>
    </div>

    <div class="input-group mb-3">
        <label class="input-group-text" for="selectRutaDestino">Seleccionar Departamento de Destino</label>
        <select class="form-select" id="selectRutaDestino" @bind="idRutaDestino">
            <option value="0">Selecciona un departamento...</option>
            @if (listaRutas != null)
            {
                foreach (var ruta in listaRutas)
                {
                    <option value="@ruta.IdRuta">@ruta.NombreRuta</option>
                }
            }
            else
            {
                <p>El objeto es null.</p>
            }
        </select>
        <button class="btn btn-secondary" @onclick="MostrarDatosDepartamentoDestino">Mostrar Datos</button>
    </div>

    <button class="btn btn-primary" @onclick="BuscarRuta">Buscar Ruta</button>
    <button class="btn btn-primary" @onclick="MostrarListas">Mostrar Listas de Departamentos</button>
    <NavLink class="btn btn-warning" href="/grupo">Volver</NavLink>
}

<div>
    @if (departamentoSeleccionado != null)
    {
        <br />
        <br />
        <table class="table table-condensed">
            <tbody>
                <tr>
                    <td scope="col"><strong>Cabecera Departamental:</strong></td>
                    <td scope="col">@departamentoSeleccionado.NombreCabecera</td>
                </tr>
                <tr>
                    <td scope="col"><strong>Distancia Capital:</strong></td>
                    <td scope="col">@($"{departamentoSeleccionado.DistanciaCapital:#,0} Kms")</td>
                </tr>
                <tr>
                    <td scope="col"><strong>Cantidad Poblacional:</strong></td>
                    <td scope="col">@($"{departamentoSeleccionado.CantidadPoblacion:#,0}")</td>
                </tr>
                <tr>
                    <td scope="col"><strong>Cantidad de municipios:</strong></td>
                    <td scope="col">@departamentoSeleccionado.CantidadMunicipios</td>
                </tr>
                <tr>
                    <td scope="col"><strong>Lugares Turísticos:</strong></td>
                    <td scope="col">
                        @if (!string.IsNullOrEmpty(departamentoSeleccionado.LugaresTuristicos))
                        {
                            <ul>
                                @foreach (var lugar in departamentoSeleccionado.LugaresTuristicos.Split(','))
                                {
                                    <li>@lugar.Trim()</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>No hay lugares turísticos registrados.</p>
                        }
                    </td>
                </tr>
            </tbody>
        </table>
        <button class="btn btn-secondary" @onclick="OcultarDatosDepartamento">Ocultar</button>
    }
</div>


@* <div class="row">
    <div class="col-md-6">
        <h4>Departamentos más cercanos a Guatemala:</h4>
        @if (departamentosCercanos != null && departamentosCercanos.Any())
        {
            <ul>
                @foreach (var departamento in departamentosCercanos)
                {
                    <li>@departamento</li>
                }
            </ul>
        }
        else
        {
            <p>No se encontraron departamentos cercanos.</p>
        }
    </div>
    <div class="col-md-6">
        <h4>Departamentos más lejanos a Guatemala:</h4>
        @if (departamentosLejanos != null && departamentosLejanos.Any())
        {
            <ul>
                @foreach (var departamento in departamentosLejanos)
                {
                    <li>@departamento</li>
                }
            </ul>
        }
        else
        {
            <p>No se encontraron departamentos lejanos.</p>
        }
    </div>
</div> *@

@if (nodosIntermedios != null && nodosIntermedios.Any())
{
    <br />
    <br />
    <h4>Ruta más corta - Distancia Total: @CalcularDistanciaTotal(nodosIntermedios[0]) Kms</h4>
    <div class="horizontal-list">
        @foreach (var nodo in nodosIntermedios[0])
        {
            @* <span class="list-item">*</span> *@
            <span class="list-item"> | </span>
            <span class="list-item">@nodo.ruta.NombreRuta</span>
            <span class="list-item"> | </span>
            @if (nodo != nodosIntermedios[0].Last())
            {
                <span class="separator">   (*)===>   </span>
            }
        }
    </div>

    <br />
    <br />
    <h4>Ruta más larga - Distancia Total: @CalcularDistanciaTotal(nodosIntermedios[1]) Kms</h4>
    <div class="horizontal-list">
        @foreach (var nodo in nodosIntermedios[1])
        {
            @* <span class="list-item">*</span> *@
            <span class="list-item"> | </span>
            <span class="list-item">@nodo.ruta.NombreRuta</span>
            <span class="list-item"> | </span>
            @if (nodo != nodosIntermedios[1].Last())
            {
                <span class="separator">   (*)===>   </span>
            }
        }
    </div>
    <br />
    <tr>
        <td colspan="12" align="center">
            <img style="width:50px; display:block; margin:auto;" src="~/rutasNodos.png" />
        </td>
    </tr>
    @* <img src="~/rutasNodos.png" alt="Imagen de la interconexion de los nodos"> *@
    <br />
    <button class="btn btn-secondary" @onclick="OcultarRutas">Ocultar Rutas</button>
}

@if (mostrarListas)
{
    <Modal>
        <div class="col-md-12">
            <br />
            <br />
            <h3 class="text-center">Departamentos Mas Lejanos y Mas Cercanos A La Capital</h3>
        </div>
        <div class="row">
            <div class="row">
                <br />
                <br />
                <div class="col-md-6">
                    <h4>Top 10 Departamentos más cercanos a Guatemala:</h4>
                    @if (departamentosCercanos != null && departamentosCercanos.Any())
                    {
                        <ul>
                            @foreach (var departamento in departamentosCercanos)
                            {
                                <li>@departamento</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No se encontraron departamentos cercanos.</p>
                    }
                </div>
                <br />
                <br />
                <div class="col-md-6">
                    <h4>Top 10 Departamentos más lejanos a Guatemala:</h4>
                    @if (departamentosLejanos != null && departamentosLejanos.Any())
                    {
                        <ul>
                            @foreach (var departamento in departamentosLejanos)
                            {
                                <li>@departamento</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No se encontraron departamentos lejanos.</p>
                    }
                </div>
            </div>
        </div>
        <button class="btn btn-secondary" @onclick="CerrarModal">Ocultar</button>
    </Modal>
}

@code {
    int idRutaPartida;
    int idRutaDestino;
    List<RutaDTO> listaRutas;
    List<List<Nodo>> nodosIntermedios;
    ListasCuadruplementeEnlazadas listasCuadruplementeEnlazadas;
    DepartamentoDTO departamentoSeleccionado;
    List<string> departamentosCercanos;
    List<string> departamentosLejanos;

    protected override async Task OnInitializedAsync()
    {
        listaRutas = await rutaService.ListaDestino();
        listasCuadruplementeEnlazadas = new ListasCuadruplementeEnlazadas(rutaService);
        await listasCuadruplementeEnlazadas.CrearNodosDesdeBD();

        var (cercanos, lejanos) = await listasCuadruplementeEnlazadas.ObtenerDepartamentosCercanosYLejanos();
        departamentosCercanos = cercanos;
        departamentosLejanos = lejanos;
    }

    bool mostrarListas = false;
    bool mostrarListasrutas = false;

    async Task MostrarListas()
    {
        mostrarListas = true;
    }

    void CerrarModal()
    {
        mostrarListas = false;
    }
    void OcultarDatosDepartamento()
    {
        departamentoSeleccionado = null;
    }

    void OcultarRutas()
    {
        nodosIntermedios = null;
    }

    async Task BuscarRuta()
    {
        if (idRutaPartida != 0 && idRutaDestino != 0)
        {
            var rutaPartidaCompleta = await rutaService.Buscar(idRutaPartida);
            var rutaDestinoCompleta = await rutaService.Buscar(idRutaDestino);

            if (rutaPartidaCompleta != null && rutaDestinoCompleta != null)
            {
                var nodoPartida = listasCuadruplementeEnlazadas.BuscarNodoPorRuta(rutaPartidaCompleta);
                var nodoDestino = listasCuadruplementeEnlazadas.BuscarNodoPorRuta(rutaDestinoCompleta);

                if (nodoPartida != null && nodoDestino != null)
                {
                    nodosIntermedios = BuscarNodosIntermediosEntreRutas(nodoPartida, nodoDestino);
                }
                else
                {
                    nodosIntermedios = null;
                }
            }
        }
    }

    List<List<Nodo>> BuscarNodosIntermediosEntreRutas(Nodo nodoPartida, Nodo nodoDestino)
    {
        var nodosIntermediosCorta = new List<Nodo>();
        var nodosIntermediosLarga = new List<Nodo>();
        var rutaActual = new List<Nodo>();

        BuscarRutaDFS(nodoPartida, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);

        return new List<List<Nodo>> { nodosIntermediosCorta, nodosIntermediosLarga };
    }

    void BuscarRutaDFS(Nodo nodoActual, Nodo nodoDestino, List<Nodo> rutaActual, List<Nodo> nodosIntermediosCorta, List<Nodo> nodosIntermediosLarga)
    {
        rutaActual.Add(nodoActual);

        if (nodoActual == nodoDestino)
        {
            if (nodosIntermediosCorta.Count == 0 || rutaActual.Count < nodosIntermediosCorta.Count)
            {
                nodosIntermediosCorta.Clear();
                nodosIntermediosCorta.AddRange(rutaActual);
            }
            if (nodosIntermediosLarga.Count == 0 || rutaActual.Count > nodosIntermediosLarga.Count)
            {
                nodosIntermediosLarga.Clear();
                nodosIntermediosLarga.AddRange(rutaActual);
            }
        }
        else
        {
            if (nodoActual.ligaNorte != null && !rutaActual.Contains(nodoActual.ligaNorte))
            {
                BuscarRutaDFS(nodoActual.ligaNorte, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);
            }
            if (nodoActual.ligaSur != null && !rutaActual.Contains(nodoActual.ligaSur))
            {
                BuscarRutaDFS(nodoActual.ligaSur, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);
            }
            if (nodoActual.ligaEste != null && !rutaActual.Contains(nodoActual.ligaEste))
            {
                BuscarRutaDFS(nodoActual.ligaEste, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);
            }
            if (nodoActual.ligaOeste != null && !rutaActual.Contains(nodoActual.ligaOeste))
            {
                BuscarRutaDFS(nodoActual.ligaOeste, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);
            }
        }

        rutaActual.Remove(nodoActual);
    }

    string CalcularDistanciaTotal(List<Nodo> nodos)
    {
        double distanciaTotal = 0;
        for (int i = 1; i < nodos.Count; i++)
        {
            double distancia = nodos[i].ruta.DistanciaDepartamentos;
            if (distancia == 0)
            {
                distanciaTotal += 50; // Sumar 50 kilómetros si la distancia es cero
            }
            else
            {
                distanciaTotal += distancia;
            }
        }
        return distanciaTotal.ToString("#,##0.00");
    }

    async Task MostrarDatosDepartamentoDestino()
    {
        if (idRutaDestino != 0)
        {
            var rutaDestinoCompleta = await rutaService.Buscar(idRutaDestino);
            if (rutaDestinoCompleta != null)
            {
                departamentoSeleccionado = rutaDestinoCompleta.DepartamentoDestino;
            }
        }
    }

    async Task MostrarDatosDepartamentoPartida()
    {
        if (idRutaPartida != 0)
        {
            var rutaPartidaCompleta = await rutaService.Buscar(idRutaPartida);
            if (rutaPartidaCompleta != null)
            {
                departamentoSeleccionado = rutaPartidaCompleta.DepartamentoDestino;
            }
        }
    }
}
