@page "/buscar-ruta"

@using System.Collections.Generic
@using System.Linq
@using RedVialGT.Shared
@using RedVialGT.Client.Services
@using System.Text.Json
@using Microsoft.JSInterop

@inject IDepartamentoService departamentoService
@inject IRutaService rutaService

<h3>Buscar Ruta entre Departamentos</h3>

<div class="input-group mb-3">
    <label class="input-group-text" for="selectRutaPartida">Seleccionar Departamento de Partida</label>
    <select class="form-select" id="selectRutaPartida" @bind="idRutaPartida">
        <option value="0">Selecciona un departamento...</option>
        @if (listaRutas != null)
        {
            foreach (var ruta in listaRutas)
            {
                <option value="@ruta.IdRuta">@ruta.NombreRuta</option>
            }
        }
        else
        {
            <p>El objeto es null.</p>
        }
    </select>
</div>

<div class="input-group mb-3">
    <label class="input-group-text" for="selectRutaDestino">Seleccionar Departamento de Destino</label>
    <select class="form-select" id="selectRutaDestino" @bind="idRutaDestino">
        <option value="0">Selecciona un departamento...</option>
        @if (listaRutas != null)
        {
            foreach (var ruta in listaRutas)
            {
                <option value="@ruta.IdRuta">@ruta.NombreRuta</option>
            }
        }
        else
        {
            <p>El objeto es null.</p>
        }
    </select>
</div>

<button class="btn btn-primary" @onclick="BuscarRuta">Buscar Ruta</button>

@if (nodosIntermedios != null && nodosIntermedios.Any())
{
    <h4>Ruta más corta</h4>
    <ul>
        @foreach (var nodo in nodosIntermedios[0])
        {
            <li>@nodo.ruta.NombreRuta</li>
        }
    </ul>

    <h4>Ruta más larga</h4>
    <ul>
        @foreach (var nodo in nodosIntermedios[1])
        {
            <li>@nodo.ruta.NombreRuta</li>
        }
    </ul>
}

@code {
    int idRutaPartida;
    int idRutaDestino;
    List<RutaDTO> listaRutas;
    List<List<Nodo>> nodosIntermedios;
    ListasCuadruplementeEnlazadas listasCuadruplementeEnlazadas;

    [Inject]
    public IRutaService RutaService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listaRutas = await RutaService.ListaDestino();
        listasCuadruplementeEnlazadas = new ListasCuadruplementeEnlazadas(RutaService);
        await listasCuadruplementeEnlazadas.CrearNodosDesdeBD();
    }

    async Task BuscarRuta()
    {
        if (idRutaPartida != 0 && idRutaDestino != 0)
        {
            var rutaPartidaCompleta = await RutaService.Buscar(idRutaPartida);
            var rutaDestinoCompleta = await RutaService.Buscar(idRutaDestino);

            if (rutaPartidaCompleta != null && rutaDestinoCompleta != null)
            {
                var nodoPartida = listasCuadruplementeEnlazadas.BuscarNodoPorRuta(rutaPartidaCompleta);
                var nodoDestino = listasCuadruplementeEnlazadas.BuscarNodoPorRuta(rutaDestinoCompleta);

                if (nodoPartida != null && nodoDestino != null)
                {
                    nodosIntermedios = BuscarNodosIntermediosEntreRutas(nodoPartida, nodoDestino);
                }
                else
                {
                    nodosIntermedios = null;
                }
            }
        }
    }

    List<List<Nodo>> BuscarNodosIntermediosEntreRutas(Nodo nodoPartida, Nodo nodoDestino)
    {
        var nodosIntermediosCorta = new List<Nodo>();
        var nodosIntermediosLarga = new List<Nodo>();
        var rutaActual = new List<Nodo>();

        BuscarRutaDFS(nodoPartida, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);

        return new List<List<Nodo>> { nodosIntermediosCorta, nodosIntermediosLarga };
    }

    void BuscarRutaDFS(Nodo nodoActual, Nodo nodoDestino, List<Nodo> rutaActual, List<Nodo> nodosIntermediosCorta, List<Nodo> nodosIntermediosLarga)
    {
        rutaActual.Add(nodoActual);

        if (nodoActual == nodoDestino)
        {
            if (nodosIntermediosCorta.Count == 0 || rutaActual.Count < nodosIntermediosCorta.Count)
            {
                nodosIntermediosCorta.Clear();
                nodosIntermediosCorta.AddRange(rutaActual);
            }
            if (nodosIntermediosLarga.Count == 0 || rutaActual.Count > nodosIntermediosLarga.Count)
            {
                nodosIntermediosLarga.Clear();
                nodosIntermediosLarga.AddRange(rutaActual);
            }
        }
        else
        {
            if (nodoActual.ligaNorte != null && !rutaActual.Contains(nodoActual.ligaNorte))
            {
                BuscarRutaDFS(nodoActual.ligaNorte, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);
            }
            if (nodoActual.ligaSur != null && !rutaActual.Contains(nodoActual.ligaSur))
            {
                BuscarRutaDFS(nodoActual.ligaSur, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);
            }
            if (nodoActual.ligaEste != null && !rutaActual.Contains(nodoActual.ligaEste))
            {
                BuscarRutaDFS(nodoActual.ligaEste, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);
            }
            if (nodoActual.ligaOeste != null && !rutaActual.Contains(nodoActual.ligaOeste))
            {
                BuscarRutaDFS(nodoActual.ligaOeste, nodoDestino, rutaActual, nodosIntermediosCorta, nodosIntermediosLarga);
            }
        }

        rutaActual.Remove(nodoActual);
    }

    public class NodoConDistancia
    {
        public Nodo nodo { get; set; }
        public int distanciaTotalKm { get; set; }
    }
}
