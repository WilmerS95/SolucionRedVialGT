@page "/buscar-ruta"

@using System.Collections.Generic
@using System.Linq
@using RedVialGT.Shared;
@using RedVialGT.Client.Services;
@using System.Text.Json;
@using Microsoft.JSInterop;

<h3>Buscar Ruta entre Departamentos</h3>

<div class="input-group mb-3">
    <label class="input-group-text" for="selectRutaPartida">Seleccionar Departamento de Partida</label>
    <select class="form-select" id="selectRutaPartida" @bind="rutaPartida">
        <option value="0">Selecciona un departamento...</option>
        @if (listaRutas != null)
        {
            foreach (var ruta in listaRutas)
            {
                <option value="@ruta.IdRuta">@ruta.NombreRuta</option>
            }
        }
        else
        {
            <p>El objeto es null.</p>
        }
    </select>
</div>

<div class="input-group mb-3">
    <label class="input-group-text" for="selectRutaDestino">Seleccionar Departamento de Destino</label>
    <select class="form-select" id="selectRutaDestino" @bind="rutaDestino">
        <option value="0">Selecciona un departamento...</option>
        @if (listaRutas != null)
        {
            foreach (var ruta in listaRutas)
            {
                <option value="@ruta.IdRuta">@ruta.NombreRuta</option>
            }
        }
        else
        {
            <p>El objeto es null.</p>
        }
    </select>
</div>

<button class="btn btn-primary" @onclick="BuscarRuta">Buscar Ruta</button>

@if (rutasEncontradas != null && rutasEncontradas.Any())
{
    <h4>Rutas Encontradas</h4>
    @foreach (var ruta in rutasEncontradas)
    {
        <ul>
            @foreach (var nodo in ruta)
            {
                <li>@nodo.ruta.NombreRuta</li>
            }
        </ul>
    }
}
else
{
    <p>No se encontraron rutas entre los departamentos seleccionados.</p>
}

@code {
    RutaDTO rutaPartida;
    RutaDTO rutaDestino;
    //int idRutaPartida;
    //int idRutaDestino;
    List<RutaDTO> listaRutas;
    List<List<Nodo>> rutasEncontradas;

    ListasCuadruplementeEnlazadas listasCuadruplementeEnlazadas;


    [Inject]
    public IRutaService RutaService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listaRutas = await RutaService.ListaDestino();
        listasCuadruplementeEnlazadas = new ListasCuadruplementeEnlazadas(RutaService);
    }

    async Task BuscarRuta()
    {
        if (rutaPartida != null && rutaDestino != null)
        {
            // Obtener la información completa de la ruta seleccionada
            var _rutaPartida = await RutaService.Buscar(rutaPartida.IdRuta);
            var _rutaDestino = await RutaService.Buscar(rutaDestino.IdRuta);

            if (rutaPartida != null && rutaDestino != null)
            {
                // Buscar los nodos correspondientes a las rutas seleccionadas
                var nodoPartida = listasCuadruplementeEnlazadas.BuscarNodoPorRuta(_rutaPartida);
                var nodoDestino = listasCuadruplementeEnlazadas.BuscarNodoPorRuta(_rutaDestino);

                if (nodoPartida != null && nodoDestino != null)
                {
                    // Buscar las rutas entre los nodos encontrados
                    rutasEncontradas = BuscarRutasEntreNodos(nodoPartida, nodoDestino);
                }
                else
                {
                    rutasEncontradas = null;
                }
            }
        }
    }

    List<List<Nodo>> BuscarRutasEntreNodos(Nodo nodoPartida, Nodo nodoDestino)
    {
        var rutas = new List<List<Nodo>>();
        var rutaActual = new List<Nodo>();

        // Iniciar la búsqueda recursiva
        BuscarRutaDFS(nodoPartida, nodoDestino, rutaActual, rutas);

        return rutas;
    }

    void BuscarRutaDFS(Nodo nodoActual, Nodo nodoDestino, List<Nodo> rutaActual, List<List<Nodo>> rutas)
    {
        // Agregar el nodo actual a la ruta actual
        rutaActual.Add(nodoActual);

        // Si el nodo actual es el nodo de destino, agregar la ruta actual a la lista de rutas
        if (nodoActual == nodoDestino)
        {
            rutas.Add(new List<Nodo>(rutaActual));
        }
        else
        {
            // Explorar las ligas del nodo actual
            if (nodoActual.ligaNorte != null && !rutaActual.Contains(nodoActual.ligaNorte))
            {
                BuscarRutaDFS(nodoActual.ligaNorte, nodoDestino, rutaActual, rutas);
            }
            if (nodoActual.ligaSur != null && !rutaActual.Contains(nodoActual.ligaSur))
            {
                BuscarRutaDFS(nodoActual.ligaSur, nodoDestino, rutaActual, rutas);
            }
            if (nodoActual.ligaEste != null && !rutaActual.Contains(nodoActual.ligaEste))
            {
                BuscarRutaDFS(nodoActual.ligaEste, nodoDestino, rutaActual, rutas);
            }
            if (nodoActual.ligaOeste != null && !rutaActual.Contains(nodoActual.ligaOeste))
            {
                BuscarRutaDFS(nodoActual.ligaOeste, nodoDestino, rutaActual, rutas);
            }
        }

        // Eliminar el nodo actual de la ruta actual para retroceder
        rutaActual.Remove(nodoActual);
    }
}
