@page "/insertar-primer-nodo"

@using RedVialGT.Shared;
@using RedVialGT.Client.Services;
@using System.Text.Json;
@using Microsoft.JSInterop;

<h3>Insertar Primer Nodo</h3>

@if (listaRutas != null)
{
    <div class="input-group mb-3">
        <label class="input-group-text" for="selectRuta">Seleccionar Ruta</label>
        <select class="form-select" id="selectRuta" @bind="idRutaSeleccionada">
            <option value="0">Selecciona una ruta...</option>
            @foreach (var ruta in listaRutas)
            {
                <option value="@ruta.IdRuta">@ruta.NombreRuta</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="InsertarPrimerNodo">Insertar Primer Nodo</button>
    </div>
}
else
{
    {
    <tr>
        <td colspan="6" align="center">
        <tr>
            <td>
                <p>Cargando...</p>
            </td>
            <td>
                <img style="width:50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
            </td>
        </tr>
    </td>
</tr>
    }
}

@if (mensaje != null)
{
    <p>@mensaje</p>
}

@if (primerNodoInsertado != null)
{
    <div>
        <h4>Ruta del Primer Nodo Insertado</h4>
        <p>@primerNodoInsertado.NombreRuta</p>
    </div>
}

@if (nodosConectados != null)
{
    <div>
        <h4>Nodos Conectados</h4>
        <ul>
            @foreach (var nodo in nodosConectados)
            {
                <li>@nodo.IdRuta: @nodo.NombreRuta</li>
            }
        </ul>
    </div>
}

@code {
    int idRutaSeleccionada;
    string mensaje = "";
    RutaDTO? primerNodoInsertado;
    List<RutaDTO>? listaRutas;
    List<RutaDTO>? nodosConectados;

    ListasCuadruplementeEnlazadas? listasCuadruplementeEnlazadas;


    [Inject]
    public IRutaService? RutaService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listaRutas = await RutaService.ListaDestino();
        listasCuadruplementeEnlazadas = new ListasCuadruplementeEnlazadas(RutaService);

        @* string primerNodoJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "primerNodo");
        if (!string.IsNullOrEmpty(primerNodoJson))
        {
            primerNodoInsertado = JsonSerializer.Deserialize<RutaDTO>(primerNodoJson);
        } *@
    }

    async Task InsertarPrimerNodo()
    {
        if (idRutaSeleccionada != 0)
        {
            var rutaSeleccionada = listaRutas.FirstOrDefault(r => r.IdRuta == idRutaSeleccionada);

            if (rutaSeleccionada != null)
            {
                primerNodoInsertado = rutaSeleccionada;
                mensaje = "Se ha agregado el primer nodo de la lista con la ruta seleccionada";
                //mensaje = await listasCuadruplementeEnlazadas.ConectarNodosDesdeBD();
                //nodosConectados = ObtenerNodosConectados();
            }
            else
            {
                mensaje = "La ruta seleccionada no es válida";
            }
        }
        else
        {
            mensaje = "Por favor, selecciona una ruta";
        }
    }

   @*  List<RutaDTO> ObtenerNodosConectados()
    {
        var nodos = new List<RutaDTO>();
        if (listasCuadruplementeEnlazadas.primerNodo != null)
        {
            var nodoActual = listasCuadruplementeEnlazadas.primerNodo;
            while (nodoActual != null)
            {
                nodos.Add(listasCuadruplementeEnlazadas.ObtenerRutaPorId(nodoActual.ruta.IdRuta));
                nodoActual = nodoActual.ligaEste;
            }
        }
        return nodos;
    } *@

    @* async Task GuardarListaNodosLocalmente()
    {
        string listaNodosJson = JsonSerializer.Serialize(primerNodoInsertado);
        await JSRuntime.InvokeAsync("localStorage.setItem", "primerNodo", primerNodoJson);
    } *@
}