@using RedVialGT.Client.Services;
@using RedVialGT.Shared;

<h3>Nodos</h3>

@if (mensaje != null)
{
    <p>@mensaje</p>
}

<div class="input-group mb-3">
    <label class="input-group-text" for="selectRuta">Seleccionar Ruta</label>
    <select class="form-select" id="selectRuta" @bind="idRutaSeleccionada">
        <option value="0">Selecciona una ruta...</option>
        @foreach (var ruta in listaRutas)
        {
            <option value="@ruta.IdRuta">@ruta.NombreRuta</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="InsertarPrimerNodo">Insertar Primer Nodo</button>
</div>

@if (lista.primerNodo != null)
{
    <div class="mb-3">
        <h4>Nodos Agregados</h4>
        <ul class="list-group">
            @foreach (var nodo in ObtenerNodos(lista.primerNodo))
            {
                <li class="list-group-item">@nodo.ruta.NombreRuta</li>
            }
        </ul>
    </div>
}

@code {

    ListasCuadruplementeEnlazadas lista;
    string mensaje = string.Empty;
    int idRutaSeleccionada;
    List<RutaDTO> listaRutas;

    [Inject]
    public IRutaService RutaService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        lista = new ListasCuadruplementeEnlazadas();
        listaRutas = await RutaService.ListaDestino();
    }

    async Task InsertarPrimerNodo()
    {
        if (idRutaSeleccionada != 0)
        {
            // Obtener la ruta seleccionada
            var rutaSeleccionada = listaRutas.FirstOrDefault(r => r.IdRuta == idRutaSeleccionada);

            if (rutaSeleccionada != null)
            {
                // Insertar el primer nodo en la lista con la ruta seleccionada
                lista.InsertarPrimerNodo(rutaSeleccionada);
                mensaje = "Se ha agregado el primer nodo de la lista con la ruta seleccionada";
            }
            else
            {
                mensaje = "La ruta seleccionada no es válida";
            }
        }
        else
        {
            mensaje = "Por favor, selecciona una ruta";
        }
    }

    List<Nodo> ObtenerNodos(Nodo nodoActual)
    {
        var nodos = new List<Nodo>();
        while (nodoActual != null)
        {
            nodos.Add(nodoActual);
            nodoActual = nodoActual; // O el nombre de la propiedad que apunta al siguiente nodo en la dirección este
        }
        return nodos;
    }
}